{"version":3,"names":["SplashScreen","React","useCallback","useEffect","useMemo","useState","Dimensions","SafeAreaProvider","getSize","ScreenProvider","initialScreen","ThemeProvider","AppContext","FontLoader","WrapperSplashScreenProps","preventAutoHideAsync","AppProvider","fonts","themes","children","SplashScreenComponent","app","setApp","initialize","isReady","isLoading","Object","values","some","value","updateInitialize","key","prev","setIsReady","AppContextValue","handleOrientation","screen","get","width","height","size","orientation","scaleSize","event","addEventListener","remove"],"sources":["index.tsx"],"sourcesContent":["import * as SplashScreen from 'expo-splash-screen';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Dimensions } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { getSize } from '../helpers/responsive';\nimport { ScreenProvider } from '../ScreenProvider';\nimport { initialScreen } from '../ScreenProvider/context';\nimport { ThemeProvider } from '../ThemeProvider';\nimport type { IConfigTheme } from '../ThemeProvider/context';\nimport { AppContext, TApp } from './context';\nimport { FontLoader, TFonts } from './font/FontLoader';\nimport { SplashScreenProps, WrapperSplashScreenProps } from './splashScreen/WrapperSplashScreen';\n\nexport interface AppProviderProps {\n  fonts?: TFonts;\n  themes?: Partial<IConfigTheme>;\n  children?: React.ReactNode;\n  SplashScreenComponent?: React.FC<SplashScreenProps>;\n}\n\nSplashScreen.preventAutoHideAsync();\n\nexport const AppProvider: React.FC<AppProviderProps> = ({\n  fonts,\n  themes,\n  children,\n  SplashScreenComponent,\n}) => {\n  const [app, setApp] = useState<TApp>({\n    initialize: {\n      fonts: false,\n    },\n    isReady: false,\n    ...initialScreen,\n  });\n\n  const isLoading = useMemo(() => {\n    return Object.values(app.initialize).some((value) => !value);\n  }, [app]);\n\n  const updateInitialize = useCallback((key: string, value: boolean) => {\n    setApp((prev) => ({\n      ...prev,\n      initialize: {\n        ...prev.initialize,\n        [key]: value,\n      },\n    }));\n  }, []);\n\n  const setIsReady = useCallback((value: boolean) => {\n    setApp((prev) => ({\n      ...prev,\n      isReady: value,\n    }));\n  }, []);\n\n  const AppContextValue = useMemo(\n    () => ({\n      ...app,\n      isLoading,\n      updateInitialize,\n      setIsReady,\n    }),\n    [app, isLoading, updateInitialize]\n  );\n\n  const handleOrientation = useCallback(() => {\n    const screen = Dimensions.get('screen');\n    const { width, height } = screen;\n    let size = getSize(screen);\n    if (height >= width) {\n      setApp((prev) => ({\n        ...prev,\n        orientation: 'PORTRAIT',\n        size,\n        scaleSize: screen,\n      }));\n    } else {\n      setApp((prev) => ({\n        ...prev,\n        orientation: 'LANDSCAPE',\n        size,\n        scaleSize: screen,\n      }));\n    }\n  }, []);\n\n  useEffect(() => {\n    const event = Dimensions.addEventListener('change', handleOrientation);\n\n    return () => {\n      event.remove();\n    };\n  }, []);\n\n  return (\n    <AppContext.Provider value={AppContextValue}>\n      <SafeAreaProvider>\n        <ScreenProvider>\n          <ThemeProvider themes={themes}>\n            <FontLoader fonts={fonts} />\n            <WrapperSplashScreenProps Component={SplashScreenComponent}>\n              {children}\n            </WrapperSplashScreenProps>\n          </ThemeProvider>\n        </ScreenProvider>\n      </SafeAreaProvider>\n    </AppContext.Provider>\n  );\n};\n"],"mappings":"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"}