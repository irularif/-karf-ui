{"version":3,"names":["React","useCallback","useEffect","useState","Dimensions","ScreenContext","screenConfig","xs","sm","md","lg","xl","initialScreen","get","ScreenProvider","children","getSize","screen","width","size","getOrientation","height","orientation","setScreen","scaleSize","updateScreen","prev","listener","addEventListener","remove"],"sources":["index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport { ScreenContext, TOrientation, TDevice } from './context';\n\nexport const screenConfig: Record<TDevice, number> = {\n  xs: 0,\n  sm: 640,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n};\n\nconst initialScreen = Dimensions.get('screen');\n\ninterface ScreenProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ScreenProvider = ({ children }: ScreenProviderProps) => {\n  const getSize = useCallback((screen: ScaledSize): TDevice => {\n    const { width } = screen;\n    let size: TDevice = 'xs';\n    if (width < screenConfig.sm) {\n      size = 'xs';\n    } else if (width < screenConfig.md) {\n      size = 'sm';\n    } else if (width < screenConfig.lg) {\n      size = 'md';\n    } else if (width < screenConfig.xl) {\n      size = 'lg';\n    } else if (width >= screenConfig.xl) {\n      size = 'xl';\n    }\n    return size;\n  }, []);\n\n  const getOrientation = useCallback((screen: ScaledSize): TOrientation => {\n    const { width, height } = screen;\n    let orientation: TOrientation = 'PORTRAIT';\n    if (width > height) {\n      orientation = 'LANDSCAPE';\n    }\n    return orientation;\n  }, []);\n\n  const [screen, setScreen] = useState({\n    orientation: getOrientation(initialScreen),\n    size: getSize(initialScreen),\n    scaleSize: initialScreen,\n  });\n\n  const updateScreen = useCallback(() => {\n    const screen = Dimensions.get('screen');\n    let size = getSize(screen);\n    let orientation = getOrientation(screen);\n    setScreen((prev) => ({\n      ...prev,\n      orientation,\n      size,\n    }));\n  }, []);\n\n  useEffect(() => {\n    const listener = Dimensions.addEventListener('change', updateScreen);\n\n    return () => {\n      listener.remove();\n    };\n  }, []);\n\n  return <ScreenContext.Provider value={screen}>{children}</ScreenContext.Provider>;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,UAAT,QAAuC,cAAvC;AACA,SAASC,aAAT,QAAqD,WAArD;AAEA,OAAO,MAAMC,YAAqC,GAAG;EACnDC,EAAE,EAAE,CAD+C;EAEnDC,EAAE,EAAE,GAF+C;EAGnDC,EAAE,EAAE,GAH+C;EAInDC,EAAE,EAAE,IAJ+C;EAKnDC,EAAE,EAAE;AAL+C,CAA9C;AAQP,MAAMC,aAAa,GAAGR,UAAU,CAACS,GAAX,CAAe,QAAf,CAAtB;AAMA,OAAO,MAAMC,cAAc,GAAG,QAAuC;EAAA,IAAtC;IAAEC;EAAF,CAAsC;EACnE,MAAMC,OAAO,GAAGf,WAAW,CAAEgB,MAAD,IAAiC;IAC3D,MAAM;MAAEC;IAAF,IAAYD,MAAlB;IACA,IAAIE,IAAa,GAAG,IAApB;;IACA,IAAID,KAAK,GAAGZ,YAAY,CAACE,EAAzB,EAA6B;MAC3BW,IAAI,GAAG,IAAP;IACD,CAFD,MAEO,IAAID,KAAK,GAAGZ,YAAY,CAACG,EAAzB,EAA6B;MAClCU,IAAI,GAAG,IAAP;IACD,CAFM,MAEA,IAAID,KAAK,GAAGZ,YAAY,CAACI,EAAzB,EAA6B;MAClCS,IAAI,GAAG,IAAP;IACD,CAFM,MAEA,IAAID,KAAK,GAAGZ,YAAY,CAACK,EAAzB,EAA6B;MAClCQ,IAAI,GAAG,IAAP;IACD,CAFM,MAEA,IAAID,KAAK,IAAIZ,YAAY,CAACK,EAA1B,EAA8B;MACnCQ,IAAI,GAAG,IAAP;IACD;;IACD,OAAOA,IAAP;EACD,CAf0B,EAexB,EAfwB,CAA3B;EAiBA,MAAMC,cAAc,GAAGnB,WAAW,CAAEgB,MAAD,IAAsC;IACvE,MAAM;MAAEC,KAAF;MAASG;IAAT,IAAoBJ,MAA1B;IACA,IAAIK,WAAyB,GAAG,UAAhC;;IACA,IAAIJ,KAAK,GAAGG,MAAZ,EAAoB;MAClBC,WAAW,GAAG,WAAd;IACD;;IACD,OAAOA,WAAP;EACD,CAPiC,EAO/B,EAP+B,CAAlC;EASA,MAAM,CAACL,MAAD,EAASM,SAAT,IAAsBpB,QAAQ,CAAC;IACnCmB,WAAW,EAAEF,cAAc,CAACR,aAAD,CADQ;IAEnCO,IAAI,EAAEH,OAAO,CAACJ,aAAD,CAFsB;IAGnCY,SAAS,EAAEZ;EAHwB,CAAD,CAApC;EAMA,MAAMa,YAAY,GAAGxB,WAAW,CAAC,MAAM;IACrC,MAAMgB,MAAM,GAAGb,UAAU,CAACS,GAAX,CAAe,QAAf,CAAf;IACA,IAAIM,IAAI,GAAGH,OAAO,CAACC,MAAD,CAAlB;IACA,IAAIK,WAAW,GAAGF,cAAc,CAACH,MAAD,CAAhC;IACAM,SAAS,CAAEG,IAAD,KAAW,EACnB,GAAGA,IADgB;MAEnBJ,WAFmB;MAGnBH;IAHmB,CAAX,CAAD,CAAT;EAKD,CAT+B,EAS7B,EAT6B,CAAhC;EAWAjB,SAAS,CAAC,MAAM;IACd,MAAMyB,QAAQ,GAAGvB,UAAU,CAACwB,gBAAX,CAA4B,QAA5B,EAAsCH,YAAtC,CAAjB;IAEA,OAAO,MAAM;MACXE,QAAQ,CAACE,MAAT;IACD,CAFD;EAGD,CANQ,EAMN,EANM,CAAT;EAQA,oBAAO,oBAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEZ;EAA/B,GAAwCF,QAAxC,CAAP;AACD,CArDM"}