{"version":3,"names":["useScreen","context","useContext","ScreenContext","undefined","Error","size","select","useCallback","params","selected","pkeys","Object","keys","pidx","indexOf","pk","Device","get"],"sources":["screen.ts"],"sourcesContent":["import { get } from 'lodash';\nimport { useCallback, useContext } from 'react';\nimport { Device, IConfigSize, ScreenContext, TDevice } from '../ScreenProvider/context';\n\nconst useScreen = () => {\n  const context = useContext(ScreenContext);\n  if (context === undefined) {\n    throw new Error('useScreen must be used within a ScreenProvider');\n  }\n\n  const { size } = context;\n\n  const select = useCallback(\n    (params: IConfigSize) => {\n      let selected = undefined;\n      let pkeys = Object.keys(params) as TDevice[];\n      let pidx = pkeys.indexOf(size);\n      if (pidx > -1) {\n        return params[size];\n      } else {\n        for (let pk of Device) {\n          selected = get(params, pk, selected);\n          if (pk === size) {\n            break;\n          }\n        }\n      }\n      return selected;\n    },\n    [size]\n  );\n\n  return {\n    ...context,\n    select,\n  };\n};\n\nexport default useScreen;\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,SAAS,GAAG,MAAM;EACtB,MAAMC,OAAO,GAAG,IAAAC,iBAAA,EAAWC,sBAAX,CAAhB;;EACA,IAAIF,OAAO,KAAKG,SAAhB,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;EACD;;EAED,MAAM;IAAEC;EAAF,IAAWL,OAAjB;EAEA,MAAMM,MAAM,GAAG,IAAAC,kBAAA,EACZC,MAAD,IAAyB;IACvB,IAAIC,QAAQ,GAAGN,SAAf;IACA,IAAIO,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAZ;IACA,IAAIK,IAAI,GAAGH,KAAK,CAACI,OAAN,CAAcT,IAAd,CAAX;;IACA,IAAIQ,IAAI,GAAG,CAAC,CAAZ,EAAe;MACb,OAAOL,MAAM,CAACH,IAAD,CAAb;IACD,CAFD,MAEO;MACL,KAAK,IAAIU,EAAT,IAAeC,eAAf,EAAuB;QACrBP,QAAQ,GAAG,IAAAQ,WAAA,EAAIT,MAAJ,EAAYO,EAAZ,EAAgBN,QAAhB,CAAX;;QACA,IAAIM,EAAE,KAAKV,IAAX,EAAiB;UACf;QACD;MACF;IACF;;IACD,OAAOI,QAAP;EACD,CAhBY,EAiBb,CAACJ,IAAD,CAjBa,CAAf;EAoBA,OAAO,EACL,GAAGL,OADE;IAELM;EAFK,CAAP;AAID,CAhCD;;eAkCeP,S"}