{"version":3,"names":["SplashScreen","preventAutoHideAsync","AppProvider","fonts","themes","children","SplashScreenComponent","app","setApp","useState","initialize","isReady","initialScreen","isLoading","useMemo","Object","values","some","value","updateInitialize","useCallback","key","prev","setIsReady","AppContextValue","handleOrientation","screen","Dimensions","get","width","height","size","getSize","orientation","scaleSize","useEffect","event","addEventListener","remove"],"sources":["index.tsx"],"sourcesContent":["import * as SplashScreen from 'expo-splash-screen';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Dimensions } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { getSize } from '../helpers/responsive';\nimport { ScreenProvider } from '../ScreenProvider';\nimport { initialScreen } from '../ScreenProvider/context';\nimport { ThemeProvider } from '../ThemeProvider';\nimport type { IConfigTheme } from '../ThemeProvider/context';\nimport { AppContext, TApp } from './context';\nimport { FontLoader, TFonts } from './font/FontLoader';\nimport { SplashScreenProps, WrapperSplashScreenProps } from './splashScreen/WrapperSplashScreen';\n\nexport interface AppProviderProps {\n  fonts?: TFonts;\n  themes?: Partial<IConfigTheme>;\n  children?: React.ReactNode;\n  SplashScreenComponent?: React.FC<SplashScreenProps>;\n}\n\nSplashScreen.preventAutoHideAsync();\n\nexport const AppProvider: React.FC<AppProviderProps> = ({\n  fonts,\n  themes,\n  children,\n  SplashScreenComponent,\n}) => {\n  const [app, setApp] = useState<TApp>({\n    initialize: {\n      fonts: false,\n    },\n    isReady: false,\n    ...initialScreen,\n  });\n\n  const isLoading = useMemo(() => {\n    return Object.values(app.initialize).some((value) => !value);\n  }, [app]);\n\n  const updateInitialize = useCallback((key: string, value: boolean) => {\n    setApp((prev) => ({\n      ...prev,\n      initialize: {\n        ...prev.initialize,\n        [key]: value,\n      },\n    }));\n  }, []);\n\n  const setIsReady = useCallback((value: boolean) => {\n    setApp((prev) => ({\n      ...prev,\n      isReady: value,\n    }));\n  }, []);\n\n  const AppContextValue = useMemo(\n    () => ({\n      ...app,\n      isLoading,\n      updateInitialize,\n      setIsReady,\n    }),\n    [app, isLoading, updateInitialize]\n  );\n\n  const handleOrientation = useCallback(() => {\n    const screen = Dimensions.get('screen');\n    const { width, height } = screen;\n    let size = getSize(screen);\n    if (height >= width) {\n      setApp((prev) => ({\n        ...prev,\n        orientation: 'PORTRAIT',\n        size,\n        scaleSize: screen,\n      }));\n    } else {\n      setApp((prev) => ({\n        ...prev,\n        orientation: 'LANDSCAPE',\n        size,\n        scaleSize: screen,\n      }));\n    }\n  }, []);\n\n  useEffect(() => {\n    const event = Dimensions.addEventListener('change', handleOrientation);\n\n    return () => {\n      event.remove();\n    };\n  }, []);\n\n  return (\n    <AppContext.Provider value={AppContextValue}>\n      <SafeAreaProvider>\n        <ScreenProvider>\n          <ThemeProvider themes={themes}>\n            <FontLoader fonts={fonts} />\n            <WrapperSplashScreenProps Component={SplashScreenComponent}>\n              {children}\n            </WrapperSplashScreenProps>\n          </ThemeProvider>\n        </ScreenProvider>\n      </SafeAreaProvider>\n    </AppContext.Provider>\n  );\n};\n"],"mappings":"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"}